{
    "Fractional Knapsack": {
        "prefix": "fractionalKnapsack",
        "body": [
            "#include<bits/stdc++.h>",
            "using namespace std;",
            "struct Item",
            "{",
            "    int value, weight;",
            "",
            "    Item(int value, int weight)",
            "        : value(value), weight(weight)",
            "    {",
            "    }",
            "};",
            "",
            "bool cmp(struct Item a, struct Item b)",
            "{",
            "    double r1 = (double)a.value / a.weight;",
            "    double r2 = (double)b.value / b.weight;",
            "    return r1 > r2;",
            "}",
            "",
            "double fractionalKnapsack(vector<Item> &arr, int N, int size)",
            "{",
            "    sort(arr.begin(), arr.end(), cmp);",
            "",
            "    int curWeight = 0;",
            "    double finalValue = 0.0;",
            "",
            "    for (int i = 0; i < size; i++)",
            "    {",
            "        if (curWeight + arr[i].weight <= N)",
            "        {",
            "            curWeight += arr[i].weight;",
            "            finalValue += arr[i].value;",
            "        }",
            "        else",
            "        {",
            "            int remain = N - curWeight;",
            "            finalValue += arr[i].value * ((double)remain / arr[i].weight);",
            "            break;",
            "        }",
            "    }",
            "",
            "    return finalValue;",
            "}",
            "",
            "int main()",
            "{",
            "    int N;",
            "    cout << \"Enter the weight of the knapsack: \";",
            "    cin >> N;",
            "",
            "    int numItems;",
            "    cout << \"Enter the number of items: \";",
            "    cin >> numItems;",
            "",
            "    vector<Item> arr;",
            "    for (int i = 0; i < numItems; i++)",
            "    {",
            "        int value, weight;",
            "        cout << \"Enter value and weight for item \" << i + 1 << \": \";",
            "        cin >> value >> weight;",
            "        arr.emplace_back(value, weight);",
            "    }",
            "",
            "    int size = arr.size();",
            "    cout << \"Maximum profit earned = \" << fractionalKnapsack(arr, N, size) << endl;",
            "",
            "    return 0;",
            "}"
        ],
        "description": "C++ Fractional Knapsack Problem"
    },
    "QuickSort": {
        "prefix": "quickSortCpp",
        "body": [
            "#include<bits/stdc++.h>",
            "using namespace std;",
            "",
            "int Partition(int arr[], int low, int high) {",
            "    int pivotElement = arr[low];",
            "    int i = low + 1;",
            "    int j = high;",
            "    while (i <= j) {",
            "        while (arr[i] <= pivotElement) i++;",
            "        while (arr[j] > pivotElement) j--;",
            "        if (i < j) swap(arr[i], arr[j]);",
            "    }",
            "    swap(arr[low], arr[j]);",
            "    return j;",
            "}",
            "",
            "void QuickSort(int arr[], int low, int high) {",
            "    if (low < high) {",
            "        int pi = Partition(arr, low, high);",
            "        QuickSort(arr, low, pi - 1);",
            "        QuickSort(arr, pi + 1, high);",
            "    }",
            "}",
            "",
            "int main() {",
            "    int n;",
            "    cout << \"Enter the size of the array: \";",
            "    cin >> n;",
            "    int arr[n];",
            "    cout << \"Enter array elements: \";",
            "    for (int i = 0; i < n; i++) cin >> arr[i];",
            "    QuickSort(arr, 0, n - 1);",
            "    cout << \"Sorted array: \";",
            "    for (int i = 0; i < n; i++) cout << arr[i] << \" \";",
            "    cout << endl;",
            "    return 0;",
            "}"
        ],
        "description": "QuickSort in C++"
    },
    "MergeSort": {
        "prefix": "mergeSortCpp",
        "body": [
            "#include<bits/stdc++.h>",
            "using namespace std;",
            "",
            "void merge(int arr[], int l, int m, int r) {",
            "    int n1 = m - l + 1;",
            "    int n2 = r - m;",
            "    int L[n1], R[n2];",
            "    for (int i = 0; i < n1; i++) L[i] = arr[l + i];",
            "    for (int j = 0; j < n2; j++) R[j] = arr[m + 1 + j];",
            "    int i = 0, j = 0, k = l;",
            "    while (i < n1 && j < n2) {",
            "        if (L[i] <= R[j]) arr[k++] = L[i++];",
            "        else arr[k++] = R[j++];",
            "    }",
            "    while (i < n1) arr[k++] = L[i++];",
            "    while (j < n2) arr[k++] = R[j++];",
            "}",
            "",
            "void mergeSort(int arr[], int l, int r) {",
            "    if (l < r) {",
            "        int m = l + (r - l) / 2;",
            "        mergeSort(arr, l, m);",
            "        mergeSort(arr, m + 1, r);",
            "        merge(arr, l, m, r);",
            "    }",
            "}",
            "",
            "int main() {",
            "    int n;",
            "    cout << \"Enter the size of the array: \";",
            "    cin >> n;",
            "    int arr[n];",
            "    cout << \"Enter array elements: \";",
            "    for (int i = 0; i < n; i++) cin >> arr[i];",
            "    mergeSort(arr, 0, n - 1);",
            "    cout << \"Sorted array: \";",
            "    for (int i = 0; i < n; i++) cout << arr[i] << \" \";",
            "    cout << endl;",
            "    return 0;",
            "}"
        ],
        "description": "MergeSort in C++"
    },
    "BubbleSort": {
        "prefix": "bubbleSortCpp",
        "body": [
            "#include<bits/stdc++.h>",
            "using namespace std;",
            "",
            "void bubbleSort(int arr[], int n) {",
            "    for (int i = 0; i < n - 1; i++) {",
            "        for (int j = 0; j < n - i - 1; j++) {",
            "            if (arr[j] > arr[j + 1]) {",
            "                swap(arr[j], arr[j + 1]);",
            "            }",
            "        }",
            "    }",
            "}",
            "",
            "int main() {",
            "    int n;",
            "    cout << \"Enter the size of the array: \";",
            "    cin >> n;",
            "    int arr[n];",
            "    cout << \"Enter array elements: \";",
            "    for (int i = 0; i < n; i++) cin >> arr[i];",
            "    bubbleSort(arr, n);",
            "    cout << \"Sorted array: \";",
            "    for (int i = 0; i < n; i++) cout << arr[i] << \" \";",
            "    cout << endl;",
            "    return 0;",
            "}"
        ],
        "description": "BubbleSort in C++"
    },
    "SelectionSort": {
        "prefix": "selectionSortCpp",
        "body": [
            "#include<bits/stdc++.h>",
            "using namespace std;",
            "",
            "void selectionSort(int arr[], int n) {",
            "    for (int i = 0; i < n - 1; i++) {",
            "        int minIdx = i;",
            "        for (int j = i + 1; j < n; j++) {",
            "            if (arr[j] < arr[minIdx]) {",
            "                minIdx = j;",
            "            }",
            "        }",
            "        swap(arr[minIdx], arr[i]);",
            "    }",
            "}",
            "",
            "int main() {",
            "    int n;",
            "    cout << \"Enter the size of the array: \";",
            "    cin >> n;",
            "    int arr[n];",
            "    cout << \"Enter array elements: \";",
            "    for (int i = 0; i < n; i++) cin >> arr[i];",
            "    selectionSort(arr, n);",
            "    cout << \"Sorted array: \";",
            "    for (int i = 0; i < n; i++) cout << arr[i] << \" \";",
            "    cout << endl;",
            "    return 0;",
            "}"
        ],
        "description": "SelectionSort in C++"
    },
    "InsertionSort": {
        "prefix": "insertionSortCpp",
        "body": [
            "#include<bits/stdc++.h>",
            "using namespace std;",
            "",
            "void insertionSort(int arr[], int n) {",
            "    for (int i = 1; i < n; i++) {",
            "        int key = arr[i];",
            "        int j = i - 1;",
            "        while (j >= 0 && arr[j] > key) {",
            "            arr[j + 1] = arr[j];",
            "            j--;",
            "        }",
            "        arr[j + 1] = key;",
            "    }",
            "}",
            "",
            "int main() {",
            "    int n;",
            "    cout << \"Enter the size of the array: \";",
            "    cin >> n;",
            "    int arr[n];",
            "    cout << \"Enter array elements: \";",
            "    for (int i = 0; i < n; i++) cin >> arr[i];",
            "    insertionSort(arr, n);",
            "    cout << \"Sorted array: \";",
            "    for (int i = 0; i < n; i++) cout << arr[i] << \" \";",
            "    cout << endl;",
            "    return 0;",
            "}"
        ],
        "description": "InsertionSort in C++"
    },
    "0/1 Knapsack": {
        "prefix": "knapsack01Cpp",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "",
            "int knapsack(int W, int wt[], int val[], int n) {",
            "    int K[n + 1][W + 1];",
            "    for (int i = 0; i <= n; i++) {",
            "        for (int w = 0; w <= W; w++) {",
            "            if (i == 0 || w == 0)",
            "                K[i][w] = 0;",
            "            else if (wt[i - 1] <= w)",
            "                K[i][w] = max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w]);",
            "            else",
            "                K[i][w] = K[i - 1][w];",
            "        }",
            "    }",
            "    return K[n][W];",
            "}",
            "",
            "int main() {",
            "    int W, n;",
            "    cout << \"Enter weight limit of knapsack: \";",
            "    cin >> W;",
            "    cout << \"Enter number of items: \";",
            "    cin >> n;",
            "    int val[n], wt[n];",
            "    cout << \"Enter values and weights of items:\\n\";",
            "    for (int i = 0; i < n; i++) {",
            "        cin >> val[i] >> wt[i];",
            "    }",
            "    cout << \"Maximum value in knapsack = \" << knapsack(W, wt, val, n) << endl;",
            "    return 0;",
            "}"
        ],
        "description": "0/1 Knapsack Problem in C++"
    },
    "Activity Selection": {
        "prefix": "activitySelectionCpp",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "",
            "struct Activity {",
            "    int start, finish;",
            "};",
            "",
            "bool comparison(Activity a, Activity b) {",
            "    return (a.finish < b.finish);",
            "}",
            "",
            "void printMaxActivities(Activity arr[], int n) {",
            "    sort(arr, arr + n, comparison);",
            "    cout << \"Following activities are selected:\\n\";",
            "    int i = 0;",
            "    cout << \"Activity \" << i + 1 << \" Start: \" << arr[i].start << \" Finish: \" << arr[i].finish << endl;",
            "    for (int j = 1; j < n; j++) {",
            "        if (arr[j].start >= arr[i].finish) {",
            "            cout << \"Activity \" << j + 1 << \" Start: \" << arr[j].start << \" Finish: \" << arr[j].finish << endl;",
            "            i = j;",
            "        }",
            "    }",
            "}",
            "",
            "int main() {",
            "    int n;",
            "    cout << \"Enter number of activities: \";",
            "    cin >> n;",
            "    Activity arr[n];",
            "    cout << \"Enter start and finish times:\\n\";",
            "    for (int i = 0; i < n; i++) {",
            "        cin >> arr[i].start >> arr[i].finish;",
            "    }",
            "    printMaxActivities(arr, n);",
            "    return 0;",
            "}"
        ],
        "description": "Activity Selection Problem in C++"
    },
    "Longest Common Subsequence": {
        "prefix": "lcsCpp",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "",
            "int lcs(string x, string y, int m, int n) {",
            "    int L[m + 1][n + 1];",
            "    for (int i = 0; i <= m; i++) {",
            "        for (int j = 0; j <= n; j++) {",
            "            if (i == 0 || j == 0)",
            "                L[i][j] = 0;",
            "            else if (x[i - 1] == y[j - 1])",
            "                L[i][j] = L[i - 1][j - 1] + 1;",
            "            else",
            "                L[i][j] = max(L[i - 1][j], L[i][j - 1]);",
            "        }",
            "    }",
            "    return L[m][n];",
            "}",
            "",
            "int main() {",
            "    string x, y;",
            "    cout << \"Enter first string: \";",
            "    cin >> x;",
            "    cout << \"Enter second string: \";",
            "    cin >> y;",
            "    int m = x.length(), n = y.length();",
            "    cout << \"Length of LCS is \" << lcs(x, y, m, n) << endl;",
            "    return 0;",
            "}"
        ],
        "description": "Longest Common Subsequence (LCS) in C++"
    },
    "Rod Cutting": {
        "prefix": "rodCuttingCpp",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "",
            "int rodCutting(int price[], int n) {",
            "    int val[n + 1];",
            "    val[0] = 0;",
            "    for (int i = 1; i <= n; i++) {",
            "        int max_val = INT_MIN;",
            "        for (int j = 0; j < i; j++)",
            "            max_val = max(max_val, price[j] + val[i - j - 1]);",
            "        val[i] = max_val;",
            "    }",
            "    return val[n];",
            "}",
            "",
            "int main() {",
            "    int n;",
            "    cout << \"Enter the length of the rod: \";",
            "    cin >> n;",
            "    int price[n];",
            "    cout << \"Enter the prices for each length: \";",
            "    for (int i = 0; i < n; i++) cin >> price[i];",
            "    cout << \"Maximum obtainable value is \" << rodCutting(price, n) << endl;",
            "    return 0;",
            "}"
        ],
        "description": "Rod Cutting Problem in C++"
    }
}
